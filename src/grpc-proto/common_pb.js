// source: common.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.AggregatedData', null, global);
goog.exportSymbol('proto.Array', null, global);
goog.exportSymbol('proto.Attribute', null, global);
goog.exportSymbol('proto.Data', null, global);
goog.exportSymbol('proto.Datum', null, global);
goog.exportSymbol('proto.Datum.ValueOneofCase', null, global);
goog.exportSymbol('proto.Field', null, global);
goog.exportSymbol('proto.FileType', null, global);
goog.exportSymbol('proto.Image', null, global);
goog.exportSymbol('proto.Message', null, global);
goog.exportSymbol('proto.OperationStatus', null, global);
goog.exportSymbol('proto.Severity', null, global);
goog.exportSymbol('proto.StatusCode', null, global);
goog.exportSymbol('proto.Structure', null, global);
goog.exportSymbol('proto.Timestamp', null, global);
goog.exportSymbol('proto.TimestampData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OperationStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OperationStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.OperationStatus.displayName = 'proto.OperationStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Message, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Message.displayName = 'proto.Message';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Data.repeatedFields_, null);
};
goog.inherits(proto.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Data.displayName = 'proto.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AggregatedData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AggregatedData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AggregatedData.displayName = 'proto.AggregatedData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimestampData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TimestampData.repeatedFields_, null);
};
goog.inherits(proto.TimestampData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimestampData.displayName = 'proto.TimestampData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Datum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Datum.oneofGroups_);
};
goog.inherits(proto.Datum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Datum.displayName = 'proto.Datum';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Image.displayName = 'proto.Image';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Structure = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Structure.repeatedFields_, null);
};
goog.inherits(proto.Structure, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Structure.displayName = 'proto.Structure';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Array = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Array.repeatedFields_, null);
};
goog.inherits(proto.Array, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Array.displayName = 'proto.Array';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Attribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Attribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Attribute.displayName = 'proto.Attribute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Field = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Field, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Field.displayName = 'proto.Field';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Timestamp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Timestamp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Timestamp.displayName = 'proto.Timestamp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OperationStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.OperationStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OperationStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OperationStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    severity: jspb.Message.getFieldWithDefault(msg, 1, 0),
    status: jspb.Message.getFieldWithDefault(msg, 2, 0),
    message: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OperationStatus}
 */
proto.OperationStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OperationStatus;
  return proto.OperationStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OperationStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OperationStatus}
 */
proto.OperationStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Severity} */ (reader.readEnum());
      msg.setSeverity(value);
      break;
    case 2:
      var value = /** @type {!proto.StatusCode} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OperationStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OperationStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OperationStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OperationStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSeverity();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional Severity severity = 1;
 * @return {!proto.Severity}
 */
proto.OperationStatus.prototype.getSeverity = function() {
  return /** @type {!proto.Severity} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Severity} value
 * @return {!proto.OperationStatus} returns this
 */
proto.OperationStatus.prototype.setSeverity = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional StatusCode status = 2;
 * @return {!proto.StatusCode}
 */
proto.OperationStatus.prototype.getStatus = function() {
  return /** @type {!proto.StatusCode} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.StatusCode} value
 * @return {!proto.OperationStatus} returns this
 */
proto.OperationStatus.prototype.setStatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string message = 3;
 * @return {string}
 */
proto.OperationStatus.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.OperationStatus} returns this
 */
proto.OperationStatus.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Message.prototype.toObject = function(opt_includeInstance) {
  return proto.Message.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Message} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.toObject = function(includeInstance, msg) {
  var f, obj = {
    message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Message;
  return proto.Message.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Message.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Message} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Message.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.Message.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Message} returns this
 */
proto.Message.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Data.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.Datum.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Data}
 */
proto.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Data;
  return proto.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Data}
 */
proto.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.Datum;
      reader.readMessage(value,proto.Datum.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Datum.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Data.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Data} returns this
 */
proto.Data.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Datum data = 2;
 * @return {!Array<!proto.Datum>}
 */
proto.Data.prototype.getDataList = function() {
  return /** @type{!Array<!proto.Datum>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Datum, 2));
};


/**
 * @param {!Array<!proto.Datum>} value
 * @return {!proto.Data} returns this
*/
proto.Data.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Datum=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Datum}
 */
proto.Data.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Datum, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Data} returns this
 */
proto.Data.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AggregatedData.prototype.toObject = function(opt_includeInstance) {
  return proto.AggregatedData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AggregatedData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AggregatedData.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    n: jspb.Message.getFieldWithDefault(msg, 10, 0),
    dispersion: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    first: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    last: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    min: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    max: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    snapshottimestamp: (f = msg.getSnapshottimestamp()) && proto.Timestamp.toObject(includeInstance, f),
    firsttimestamp: (f = msg.getFirsttimestamp()) && proto.Timestamp.toObject(includeInstance, f),
    lasttimestamp: (f = msg.getLasttimestamp()) && proto.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AggregatedData}
 */
proto.AggregatedData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AggregatedData;
  return proto.AggregatedData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AggregatedData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AggregatedData}
 */
proto.AggregatedData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setN(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDispersion(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFirst(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLast(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMin(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMax(value);
      break;
    case 16:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setSnapshottimestamp(value);
      break;
    case 17:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setFirsttimestamp(value);
      break;
    case 18:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.setLasttimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AggregatedData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AggregatedData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AggregatedData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AggregatedData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getN();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = message.getDispersion();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getFirst();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getLast();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getSnapshottimestamp();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFirsttimestamp();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLasttimestamp();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.AggregatedData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AggregatedData} returns this
 */
proto.AggregatedData.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.AggregatedData.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.AggregatedData} returns this
 */
proto.AggregatedData.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional uint32 n = 10;
 * @return {number}
 */
proto.AggregatedData.prototype.getN = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.AggregatedData} returns this
 */
proto.AggregatedData.prototype.setN = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional double dispersion = 11;
 * @return {number}
 */
proto.AggregatedData.prototype.getDispersion = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.AggregatedData} returns this
 */
proto.AggregatedData.prototype.setDispersion = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double first = 12;
 * @return {number}
 */
proto.AggregatedData.prototype.getFirst = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.AggregatedData} returns this
 */
proto.AggregatedData.prototype.setFirst = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double last = 13;
 * @return {number}
 */
proto.AggregatedData.prototype.getLast = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.AggregatedData} returns this
 */
proto.AggregatedData.prototype.setLast = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double min = 14;
 * @return {number}
 */
proto.AggregatedData.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.AggregatedData} returns this
 */
proto.AggregatedData.prototype.setMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double max = 15;
 * @return {number}
 */
proto.AggregatedData.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.AggregatedData} returns this
 */
proto.AggregatedData.prototype.setMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional Timestamp snapshotTimestamp = 16;
 * @return {?proto.Timestamp}
 */
proto.AggregatedData.prototype.getSnapshottimestamp = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 16));
};


/**
 * @param {?proto.Timestamp|undefined} value
 * @return {!proto.AggregatedData} returns this
*/
proto.AggregatedData.prototype.setSnapshottimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AggregatedData} returns this
 */
proto.AggregatedData.prototype.clearSnapshottimestamp = function() {
  return this.setSnapshottimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AggregatedData.prototype.hasSnapshottimestamp = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional Timestamp firstTimestamp = 17;
 * @return {?proto.Timestamp}
 */
proto.AggregatedData.prototype.getFirsttimestamp = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 17));
};


/**
 * @param {?proto.Timestamp|undefined} value
 * @return {!proto.AggregatedData} returns this
*/
proto.AggregatedData.prototype.setFirsttimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AggregatedData} returns this
 */
proto.AggregatedData.prototype.clearFirsttimestamp = function() {
  return this.setFirsttimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AggregatedData.prototype.hasFirsttimestamp = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional Timestamp lastTimestamp = 18;
 * @return {?proto.Timestamp}
 */
proto.AggregatedData.prototype.getLasttimestamp = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, proto.Timestamp, 18));
};


/**
 * @param {?proto.Timestamp|undefined} value
 * @return {!proto.AggregatedData} returns this
*/
proto.AggregatedData.prototype.setLasttimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AggregatedData} returns this
 */
proto.AggregatedData.prototype.clearLasttimestamp = function() {
  return this.setLasttimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AggregatedData.prototype.hasLasttimestamp = function() {
  return jspb.Message.getField(this, 18) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TimestampData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimestampData.prototype.toObject = function(opt_includeInstance) {
  return proto.TimestampData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimestampData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimestampData.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampsList: jspb.Message.toObjectList(msg.getTimestampsList(),
    proto.Timestamp.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimestampData}
 */
proto.TimestampData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimestampData;
  return proto.TimestampData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimestampData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimestampData}
 */
proto.TimestampData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Timestamp;
      reader.readMessage(value,proto.Timestamp.deserializeBinaryFromReader);
      msg.addTimestamps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimestampData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimestampData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimestampData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimestampData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestampsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Timestamp timestamps = 1;
 * @return {!Array<!proto.Timestamp>}
 */
proto.TimestampData.prototype.getTimestampsList = function() {
  return /** @type{!Array<!proto.Timestamp>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Timestamp, 1));
};


/**
 * @param {!Array<!proto.Timestamp>} value
 * @return {!proto.TimestampData} returns this
*/
proto.TimestampData.prototype.setTimestampsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Timestamp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Timestamp}
 */
proto.TimestampData.prototype.addTimestamps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Timestamp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.TimestampData} returns this
 */
proto.TimestampData.prototype.clearTimestampsList = function() {
  return this.setTimestampsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Datum.oneofGroups_ = [[1,3,4,5,6,7,8,10,11]];

/**
 * @enum {number}
 */
proto.Datum.ValueOneofCase = {
  VALUE_ONEOF_NOT_SET: 0,
  STRINGVALUE: 1,
  FLOATVALUE: 3,
  INTVALUE: 4,
  BYTEARRAYVALUE: 5,
  BOOLEANVALUE: 6,
  IMAGE: 7,
  STATUS: 8,
  STRUCTUREVALUE: 10,
  ARRAYVALUE: 11
};

/**
 * @return {proto.Datum.ValueOneofCase}
 */
proto.Datum.prototype.getValueOneofCase = function() {
  return /** @type {proto.Datum.ValueOneofCase} */(jspb.Message.computeOneofCase(this, proto.Datum.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Datum.prototype.toObject = function(opt_includeInstance) {
  return proto.Datum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Datum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Datum.toObject = function(includeInstance, msg) {
  var f, obj = {
    stringvalue: jspb.Message.getFieldWithDefault(msg, 1, ""),
    floatvalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    intvalue: jspb.Message.getFieldWithDefault(msg, 4, 0),
    bytearrayvalue: msg.getBytearrayvalue_asB64(),
    booleanvalue: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    image: (f = msg.getImage()) && proto.Image.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && proto.OperationStatus.toObject(includeInstance, f),
    structurevalue: (f = msg.getStructurevalue()) && proto.Structure.toObject(includeInstance, f),
    arrayvalue: (f = msg.getArrayvalue()) && proto.Array.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Datum}
 */
proto.Datum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Datum;
  return proto.Datum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Datum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Datum}
 */
proto.Datum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringvalue(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFloatvalue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setIntvalue(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBytearrayvalue(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBooleanvalue(value);
      break;
    case 7:
      var value = new proto.Image;
      reader.readMessage(value,proto.Image.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 8:
      var value = new proto.OperationStatus;
      reader.readMessage(value,proto.OperationStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 10:
      var value = new proto.Structure;
      reader.readMessage(value,proto.Structure.deserializeBinaryFromReader);
      msg.setStructurevalue(value);
      break;
    case 11:
      var value = new proto.Array;
      reader.readMessage(value,proto.Array.deserializeBinaryFromReader);
      msg.setArrayvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Datum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Datum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Datum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Datum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Image.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.OperationStatus.serializeBinaryToWriter
    );
  }
  f = message.getStructurevalue();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.Structure.serializeBinaryToWriter
    );
  }
  f = message.getArrayvalue();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.Array.serializeBinaryToWriter
    );
  }
};


/**
 * optional string stringValue = 1;
 * @return {string}
 */
proto.Datum.prototype.getStringvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Datum} returns this
 */
proto.Datum.prototype.setStringvalue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.Datum.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Datum} returns this
 */
proto.Datum.prototype.clearStringvalue = function() {
  return jspb.Message.setOneofField(this, 1, proto.Datum.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Datum.prototype.hasStringvalue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double floatValue = 3;
 * @return {number}
 */
proto.Datum.prototype.getFloatvalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Datum} returns this
 */
proto.Datum.prototype.setFloatvalue = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.Datum.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Datum} returns this
 */
proto.Datum.prototype.clearFloatvalue = function() {
  return jspb.Message.setOneofField(this, 3, proto.Datum.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Datum.prototype.hasFloatvalue = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 intValue = 4;
 * @return {number}
 */
proto.Datum.prototype.getIntvalue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Datum} returns this
 */
proto.Datum.prototype.setIntvalue = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.Datum.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Datum} returns this
 */
proto.Datum.prototype.clearIntvalue = function() {
  return jspb.Message.setOneofField(this, 4, proto.Datum.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Datum.prototype.hasIntvalue = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes byteArrayValue = 5;
 * @return {!(string|Uint8Array)}
 */
proto.Datum.prototype.getBytearrayvalue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes byteArrayValue = 5;
 * This is a type-conversion wrapper around `getBytearrayvalue()`
 * @return {string}
 */
proto.Datum.prototype.getBytearrayvalue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBytearrayvalue()));
};


/**
 * optional bytes byteArrayValue = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBytearrayvalue()`
 * @return {!Uint8Array}
 */
proto.Datum.prototype.getBytearrayvalue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBytearrayvalue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Datum} returns this
 */
proto.Datum.prototype.setBytearrayvalue = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.Datum.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Datum} returns this
 */
proto.Datum.prototype.clearBytearrayvalue = function() {
  return jspb.Message.setOneofField(this, 5, proto.Datum.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Datum.prototype.hasBytearrayvalue = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool booleanValue = 6;
 * @return {boolean}
 */
proto.Datum.prototype.getBooleanvalue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Datum} returns this
 */
proto.Datum.prototype.setBooleanvalue = function(value) {
  return jspb.Message.setOneofField(this, 6, proto.Datum.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Datum} returns this
 */
proto.Datum.prototype.clearBooleanvalue = function() {
  return jspb.Message.setOneofField(this, 6, proto.Datum.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Datum.prototype.hasBooleanvalue = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Image image = 7;
 * @return {?proto.Image}
 */
proto.Datum.prototype.getImage = function() {
  return /** @type{?proto.Image} */ (
    jspb.Message.getWrapperField(this, proto.Image, 7));
};


/**
 * @param {?proto.Image|undefined} value
 * @return {!proto.Datum} returns this
*/
proto.Datum.prototype.setImage = function(value) {
  return jspb.Message.setOneofWrapperField(this, 7, proto.Datum.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Datum} returns this
 */
proto.Datum.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Datum.prototype.hasImage = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional OperationStatus status = 8;
 * @return {?proto.OperationStatus}
 */
proto.Datum.prototype.getStatus = function() {
  return /** @type{?proto.OperationStatus} */ (
    jspb.Message.getWrapperField(this, proto.OperationStatus, 8));
};


/**
 * @param {?proto.OperationStatus|undefined} value
 * @return {!proto.Datum} returns this
*/
proto.Datum.prototype.setStatus = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.Datum.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Datum} returns this
 */
proto.Datum.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Datum.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional Structure structureValue = 10;
 * @return {?proto.Structure}
 */
proto.Datum.prototype.getStructurevalue = function() {
  return /** @type{?proto.Structure} */ (
    jspb.Message.getWrapperField(this, proto.Structure, 10));
};


/**
 * @param {?proto.Structure|undefined} value
 * @return {!proto.Datum} returns this
*/
proto.Datum.prototype.setStructurevalue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.Datum.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Datum} returns this
 */
proto.Datum.prototype.clearStructurevalue = function() {
  return this.setStructurevalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Datum.prototype.hasStructurevalue = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional Array arrayValue = 11;
 * @return {?proto.Array}
 */
proto.Datum.prototype.getArrayvalue = function() {
  return /** @type{?proto.Array} */ (
    jspb.Message.getWrapperField(this, proto.Array, 11));
};


/**
 * @param {?proto.Array|undefined} value
 * @return {!proto.Datum} returns this
*/
proto.Datum.prototype.setArrayvalue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.Datum.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Datum} returns this
 */
proto.Datum.prototype.clearArrayvalue = function() {
  return this.setArrayvalue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Datum.prototype.hasArrayvalue = function() {
  return jspb.Message.getField(this, 11) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    image: msg.getImage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Image}
 */
proto.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Image;
  return proto.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Image}
 */
proto.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.FileType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional FileType type = 1;
 * @return {!proto.FileType}
 */
proto.Image.prototype.getType = function() {
  return /** @type {!proto.FileType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.FileType} value
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes image = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Image.prototype.getImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes image = 2;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
proto.Image.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * optional bytes image = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
proto.Image.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.Image} returns this
 */
proto.Image.prototype.setImage = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Structure.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Structure.prototype.toObject = function(opt_includeInstance) {
  return proto.Structure.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Structure} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Structure.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.Field.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Structure}
 */
proto.Structure.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Structure;
  return proto.Structure.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Structure} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Structure}
 */
proto.Structure.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Field;
      reader.readMessage(value,proto.Field.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Structure.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Structure.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Structure} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Structure.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Field.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Field fields = 1;
 * @return {!Array<!proto.Field>}
 */
proto.Structure.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.Field>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Field, 1));
};


/**
 * @param {!Array<!proto.Field>} value
 * @return {!proto.Structure} returns this
*/
proto.Structure.prototype.setFieldsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Field=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Field}
 */
proto.Structure.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Field, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Structure} returns this
 */
proto.Structure.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Array.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Array.prototype.toObject = function(opt_includeInstance) {
  return proto.Array.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Array} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Array.toObject = function(includeInstance, msg) {
  var f, obj = {
    valueList: jspb.Message.toObjectList(msg.getValueList(),
    proto.Datum.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Array}
 */
proto.Array.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Array;
  return proto.Array.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Array} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Array}
 */
proto.Array.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Datum;
      reader.readMessage(value,proto.Datum.deserializeBinaryFromReader);
      msg.addValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Array.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Array.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Array} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Array.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Datum.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Datum value = 1;
 * @return {!Array<!proto.Datum>}
 */
proto.Array.prototype.getValueList = function() {
  return /** @type{!Array<!proto.Datum>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Datum, 1));
};


/**
 * @param {!Array<!proto.Datum>} value
 * @return {!proto.Array} returns this
*/
proto.Array.prototype.setValueList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Datum=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Datum}
 */
proto.Array.prototype.addValue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Datum, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Array} returns this
 */
proto.Array.prototype.clearValueList = function() {
  return this.setValueList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Attribute.prototype.toObject = function(opt_includeInstance) {
  return proto.Attribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Attribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Attribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Attribute}
 */
proto.Attribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Attribute;
  return proto.Attribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Attribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Attribute}
 */
proto.Attribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Attribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Attribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Attribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Attribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Attribute.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Attribute} returns this
 */
proto.Attribute.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.Attribute.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Attribute} returns this
 */
proto.Attribute.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Field.prototype.toObject = function(opt_includeInstance) {
  return proto.Field.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Field} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Field.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: (f = msg.getValue()) && proto.Datum.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Field}
 */
proto.Field.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Field;
  return proto.Field.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Field} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Field}
 */
proto.Field.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.Datum;
      reader.readMessage(value,proto.Datum.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Field.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Field.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Field} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Field.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Datum.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Field.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Field} returns this
 */
proto.Field.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Datum value = 2;
 * @return {?proto.Datum}
 */
proto.Field.prototype.getValue = function() {
  return /** @type{?proto.Datum} */ (
    jspb.Message.getWrapperField(this, proto.Datum, 2));
};


/**
 * @param {?proto.Datum|undefined} value
 * @return {!proto.Field} returns this
*/
proto.Field.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Field} returns this
 */
proto.Field.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Field.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Timestamp.prototype.toObject = function(opt_includeInstance) {
  return proto.Timestamp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Timestamp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Timestamp.toObject = function(includeInstance, msg) {
  var f, obj = {
    epochseconds: jspb.Message.getFieldWithDefault(msg, 1, 0),
    nanoseconds: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Timestamp}
 */
proto.Timestamp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Timestamp;
  return proto.Timestamp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Timestamp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Timestamp}
 */
proto.Timestamp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEpochseconds(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNanoseconds(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Timestamp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Timestamp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Timestamp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Timestamp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEpochseconds();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getNanoseconds();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional uint64 epochSeconds = 1;
 * @return {number}
 */
proto.Timestamp.prototype.getEpochseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Timestamp} returns this
 */
proto.Timestamp.prototype.setEpochseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 nanoseconds = 2;
 * @return {number}
 */
proto.Timestamp.prototype.getNanoseconds = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Timestamp} returns this
 */
proto.Timestamp.prototype.setNanoseconds = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.StatusCode = {
  NO_STATUS: 0,
  DEVICE_STATUS: 1,
  DRIVER_STATUS: 2,
  RECORD_STATUS: 3,
  DB_STATUS: 4,
  CONF_STATUS: 5,
  UNDEFINED_STATUS: 6,
  CLIENT_STATUS: 7
};

/**
 * @enum {number}
 */
proto.Severity = {
  NO_ALARM: 0,
  MINOR_ALARM: 1,
  MAJOR_ALARM: 2,
  INVALID_ALARM: 3,
  UNDEFINED_ALARM: 4
};

/**
 * @enum {number}
 */
proto.FileType = {
  RAW: 0,
  JPEG: 1,
  GIF: 2,
  TIFF: 3,
  BMP: 4,
  PNG: 5,
  EPS: 6,
  SVG: 7,
  PDF: 8
};

goog.object.extend(exports, proto);
