// source: query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var common_pb = require('./common_pb.js');
goog.object.extend(proto, common_pb);
goog.exportSymbol('proto.Annotation', null, global);
goog.exportSymbol('proto.AnnotationsResponse', null, global);
goog.exportSymbol('proto.PV', null, global);
goog.exportSymbol('proto.PVField', null, global);
goog.exportSymbol('proto.PVResponse', null, global);
goog.exportSymbol('proto.PVType', null, global);
goog.exportSymbol('proto.PaginatedRequest', null, global);
goog.exportSymbol('proto.PaginatedRequest.ValueOneofCase', null, global);
goog.exportSymbol('proto.PaginatedResponse', null, global);
goog.exportSymbol('proto.Query', null, global);
goog.exportSymbol('proto.Request', null, global);
goog.exportSymbol('proto.Snapshot', null, global);
goog.exportSymbol('proto.SnapshotQuery', null, global);
goog.exportSymbol('proto.SnapshotResponse', null, global);
goog.exportSymbol('proto.SnapshotTimestampClausePredicate', null, global);
goog.exportSymbol('proto.SnapshotTimestampClauseSelector', null, global);
goog.exportSymbol('proto.TimestampClause', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PaginatedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.PaginatedRequest.oneofGroups_);
};
goog.inherits(proto.PaginatedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PaginatedRequest.displayName = 'proto.PaginatedRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Request.displayName = 'proto.Request';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Query.displayName = 'proto.Query';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PaginatedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PaginatedResponse.repeatedFields_, null);
};
goog.inherits(proto.PaginatedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PaginatedResponse.displayName = 'proto.PaginatedResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SnapshotResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SnapshotResponse.repeatedFields_, null);
};
goog.inherits(proto.SnapshotResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SnapshotResponse.displayName = 'proto.SnapshotResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SnapshotQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SnapshotQuery.repeatedFields_, null);
};
goog.inherits(proto.SnapshotQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SnapshotQuery.displayName = 'proto.SnapshotQuery';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TimestampClause = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TimestampClause, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TimestampClause.displayName = 'proto.TimestampClause';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Snapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Snapshot.repeatedFields_, null);
};
goog.inherits(proto.Snapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Snapshot.displayName = 'proto.Snapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PVResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PVResponse.repeatedFields_, null);
};
goog.inherits(proto.PVResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PVResponse.displayName = 'proto.PVResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PV = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.PV.repeatedFields_, null);
};
goog.inherits(proto.PV, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PV.displayName = 'proto.PV';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PVField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PVField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PVField.displayName = 'proto.PVField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AnnotationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.AnnotationsResponse.repeatedFields_, null);
};
goog.inherits(proto.AnnotationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AnnotationsResponse.displayName = 'proto.AnnotationsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Annotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Annotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Annotation.displayName = 'proto.Annotation';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.PaginatedRequest.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.PaginatedRequest.ValueOneofCase = {
  VALUE_ONEOF_NOT_SET: 0,
  REQUEST: 1,
  PAGE: 2
};

/**
 * @return {proto.PaginatedRequest.ValueOneofCase}
 */
proto.PaginatedRequest.prototype.getValueOneofCase = function() {
  return /** @type {proto.PaginatedRequest.ValueOneofCase} */(jspb.Message.computeOneofCase(this, proto.PaginatedRequest.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PaginatedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PaginatedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PaginatedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PaginatedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    request: (f = msg.getRequest()) && proto.Request.toObject(includeInstance, f),
    page: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PaginatedRequest}
 */
proto.PaginatedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PaginatedRequest;
  return proto.PaginatedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PaginatedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PaginatedRequest}
 */
proto.PaginatedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Request;
      reader.readMessage(value,proto.Request.deserializeBinaryFromReader);
      msg.setRequest(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PaginatedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PaginatedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PaginatedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PaginatedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Request.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional Request request = 1;
 * @return {?proto.Request}
 */
proto.PaginatedRequest.prototype.getRequest = function() {
  return /** @type{?proto.Request} */ (
    jspb.Message.getWrapperField(this, proto.Request, 1));
};


/**
 * @param {?proto.Request|undefined} value
 * @return {!proto.PaginatedRequest} returns this
*/
proto.PaginatedRequest.prototype.setRequest = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.PaginatedRequest.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PaginatedRequest} returns this
 */
proto.PaginatedRequest.prototype.clearRequest = function() {
  return this.setRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PaginatedRequest.prototype.hasRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 page = 2;
 * @return {number}
 */
proto.PaginatedRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.PaginatedRequest} returns this
 */
proto.PaginatedRequest.prototype.setPage = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.PaginatedRequest.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.PaginatedRequest} returns this
 */
proto.PaginatedRequest.prototype.clearPage = function() {
  return jspb.Message.setOneofField(this, 2, proto.PaginatedRequest.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PaginatedRequest.prototype.hasPage = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Request} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    perpage: jspb.Message.getFieldWithDefault(msg, 2, 0),
    page: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Request}
 */
proto.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Request;
  return proto.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Request}
 */
proto.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPerpage(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Request.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Request} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Request.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPerpage();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.Request.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Request} returns this
 */
proto.Request.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 perPage = 2;
 * @return {number}
 */
proto.Request.prototype.getPerpage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Request} returns this
 */
proto.Request.prototype.setPerpage = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 page = 3;
 * @return {number}
 */
proto.Request.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Request} returns this
 */
proto.Request.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Query}
 */
proto.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Query;
  return proto.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Query}
 */
proto.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.Query.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Query} returns this
 */
proto.Query.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PaginatedResponse.repeatedFields_ = [2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PaginatedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PaginatedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PaginatedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PaginatedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    labelsList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    timestampsList: jspb.Message.toObjectList(msg.getTimestampsList(),
    common_pb.Timestamp.toObject, includeInstance),
    columnsList: jspb.Message.toObjectList(msg.getColumnsList(),
    common_pb.Data.toObject, includeInstance),
    totalrows: jspb.Message.getFieldWithDefault(msg, 5, 0),
    totalpages: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PaginatedResponse}
 */
proto.PaginatedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PaginatedResponse;
  return proto.PaginatedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PaginatedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PaginatedResponse}
 */
proto.PaginatedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addLabels(value);
      break;
    case 3:
      var value = new common_pb.Timestamp;
      reader.readMessage(value,common_pb.Timestamp.deserializeBinaryFromReader);
      msg.addTimestamps(value);
      break;
    case 4:
      var value = new common_pb.Data;
      reader.readMessage(value,common_pb.Data.deserializeBinaryFromReader);
      msg.addColumns(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotalrows(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalpages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PaginatedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PaginatedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PaginatedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PaginatedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getLabelsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getTimestampsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      common_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      common_pb.Data.serializeBinaryToWriter
    );
  }
  f = message.getTotalrows();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = message.getTotalpages();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional uint32 page = 1;
 * @return {number}
 */
proto.PaginatedResponse.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.PaginatedResponse} returns this
 */
proto.PaginatedResponse.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string labels = 2;
 * @return {!Array<string>}
 */
proto.PaginatedResponse.prototype.getLabelsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.PaginatedResponse} returns this
 */
proto.PaginatedResponse.prototype.setLabelsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.PaginatedResponse} returns this
 */
proto.PaginatedResponse.prototype.addLabels = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PaginatedResponse} returns this
 */
proto.PaginatedResponse.prototype.clearLabelsList = function() {
  return this.setLabelsList([]);
};


/**
 * repeated Timestamp timestamps = 3;
 * @return {!Array<!proto.Timestamp>}
 */
proto.PaginatedResponse.prototype.getTimestampsList = function() {
  return /** @type{!Array<!proto.Timestamp>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Timestamp, 3));
};


/**
 * @param {!Array<!proto.Timestamp>} value
 * @return {!proto.PaginatedResponse} returns this
*/
proto.PaginatedResponse.prototype.setTimestampsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Timestamp=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Timestamp}
 */
proto.PaginatedResponse.prototype.addTimestamps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Timestamp, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PaginatedResponse} returns this
 */
proto.PaginatedResponse.prototype.clearTimestampsList = function() {
  return this.setTimestampsList([]);
};


/**
 * repeated Data columns = 4;
 * @return {!Array<!proto.Data>}
 */
proto.PaginatedResponse.prototype.getColumnsList = function() {
  return /** @type{!Array<!proto.Data>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Data, 4));
};


/**
 * @param {!Array<!proto.Data>} value
 * @return {!proto.PaginatedResponse} returns this
*/
proto.PaginatedResponse.prototype.setColumnsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Data=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Data}
 */
proto.PaginatedResponse.prototype.addColumns = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Data, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PaginatedResponse} returns this
 */
proto.PaginatedResponse.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};


/**
 * optional uint64 totalRows = 5;
 * @return {number}
 */
proto.PaginatedResponse.prototype.getTotalrows = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PaginatedResponse} returns this
 */
proto.PaginatedResponse.prototype.setTotalrows = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 totalPages = 6;
 * @return {number}
 */
proto.PaginatedResponse.prototype.getTotalpages = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.PaginatedResponse} returns this
 */
proto.PaginatedResponse.prototype.setTotalpages = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SnapshotResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SnapshotResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SnapshotResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SnapshotResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SnapshotResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    snapshotsList: jspb.Message.toObjectList(msg.getSnapshotsList(),
    proto.Snapshot.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SnapshotResponse}
 */
proto.SnapshotResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SnapshotResponse;
  return proto.SnapshotResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SnapshotResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SnapshotResponse}
 */
proto.SnapshotResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Snapshot;
      reader.readMessage(value,proto.Snapshot.deserializeBinaryFromReader);
      msg.addSnapshots(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SnapshotResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SnapshotResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SnapshotResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SnapshotResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSnapshotsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Snapshot.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Snapshot snapshots = 1;
 * @return {!Array<!proto.Snapshot>}
 */
proto.SnapshotResponse.prototype.getSnapshotsList = function() {
  return /** @type{!Array<!proto.Snapshot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Snapshot, 1));
};


/**
 * @param {!Array<!proto.Snapshot>} value
 * @return {!proto.SnapshotResponse} returns this
*/
proto.SnapshotResponse.prototype.setSnapshotsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Snapshot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Snapshot}
 */
proto.SnapshotResponse.prototype.addSnapshots = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Snapshot, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SnapshotResponse} returns this
 */
proto.SnapshotResponse.prototype.clearSnapshotsList = function() {
  return this.setSnapshotsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SnapshotQuery.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SnapshotQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.SnapshotQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SnapshotQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SnapshotQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestampclausesList: jspb.Message.toObjectList(msg.getTimestampclausesList(),
    proto.TimestampClause.toObject, includeInstance),
    attributeclausesList: jspb.Message.toObjectList(msg.getAttributeclausesList(),
    common_pb.Attribute.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SnapshotQuery}
 */
proto.SnapshotQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SnapshotQuery;
  return proto.SnapshotQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SnapshotQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SnapshotQuery}
 */
proto.SnapshotQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TimestampClause;
      reader.readMessage(value,proto.TimestampClause.deserializeBinaryFromReader);
      msg.addTimestampclauses(value);
      break;
    case 2:
      var value = new common_pb.Attribute;
      reader.readMessage(value,common_pb.Attribute.deserializeBinaryFromReader);
      msg.addAttributeclauses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SnapshotQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SnapshotQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SnapshotQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SnapshotQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestampclausesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TimestampClause.serializeBinaryToWriter
    );
  }
  f = message.getAttributeclausesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      common_pb.Attribute.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TimestampClause timestampClauses = 1;
 * @return {!Array<!proto.TimestampClause>}
 */
proto.SnapshotQuery.prototype.getTimestampclausesList = function() {
  return /** @type{!Array<!proto.TimestampClause>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TimestampClause, 1));
};


/**
 * @param {!Array<!proto.TimestampClause>} value
 * @return {!proto.SnapshotQuery} returns this
*/
proto.SnapshotQuery.prototype.setTimestampclausesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TimestampClause=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TimestampClause}
 */
proto.SnapshotQuery.prototype.addTimestampclauses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TimestampClause, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SnapshotQuery} returns this
 */
proto.SnapshotQuery.prototype.clearTimestampclausesList = function() {
  return this.setTimestampclausesList([]);
};


/**
 * repeated Attribute attributeClauses = 2;
 * @return {!Array<!proto.Attribute>}
 */
proto.SnapshotQuery.prototype.getAttributeclausesList = function() {
  return /** @type{!Array<!proto.Attribute>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Attribute, 2));
};


/**
 * @param {!Array<!proto.Attribute>} value
 * @return {!proto.SnapshotQuery} returns this
*/
proto.SnapshotQuery.prototype.setAttributeclausesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Attribute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Attribute}
 */
proto.SnapshotQuery.prototype.addAttributeclauses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Attribute, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SnapshotQuery} returns this
 */
proto.SnapshotQuery.prototype.clearAttributeclausesList = function() {
  return this.setAttributeclausesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TimestampClause.prototype.toObject = function(opt_includeInstance) {
  return proto.TimestampClause.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TimestampClause} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimestampClause.toObject = function(includeInstance, msg) {
  var f, obj = {
    selector: jspb.Message.getFieldWithDefault(msg, 1, 0),
    predicate: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timestamp: (f = msg.getTimestamp()) && common_pb.Timestamp.toObject(includeInstance, f),
    endtimestamp: (f = msg.getEndtimestamp()) && common_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TimestampClause}
 */
proto.TimestampClause.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TimestampClause;
  return proto.TimestampClause.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TimestampClause} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TimestampClause}
 */
proto.TimestampClause.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.SnapshotTimestampClauseSelector} */ (reader.readEnum());
      msg.setSelector(value);
      break;
    case 2:
      var value = /** @type {!proto.SnapshotTimestampClausePredicate} */ (reader.readEnum());
      msg.setPredicate(value);
      break;
    case 3:
      var value = new common_pb.Timestamp;
      reader.readMessage(value,common_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 4:
      var value = new common_pb.Timestamp;
      reader.readMessage(value,common_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEndtimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TimestampClause.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TimestampClause.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TimestampClause} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TimestampClause.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelector();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPredicate();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEndtimestamp();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional SnapshotTimestampClauseSelector selector = 1;
 * @return {!proto.SnapshotTimestampClauseSelector}
 */
proto.TimestampClause.prototype.getSelector = function() {
  return /** @type {!proto.SnapshotTimestampClauseSelector} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.SnapshotTimestampClauseSelector} value
 * @return {!proto.TimestampClause} returns this
 */
proto.TimestampClause.prototype.setSelector = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SnapshotTimestampClausePredicate predicate = 2;
 * @return {!proto.SnapshotTimestampClausePredicate}
 */
proto.TimestampClause.prototype.getPredicate = function() {
  return /** @type {!proto.SnapshotTimestampClausePredicate} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.SnapshotTimestampClausePredicate} value
 * @return {!proto.TimestampClause} returns this
 */
proto.TimestampClause.prototype.setPredicate = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Timestamp timestamp = 3;
 * @return {?proto.Timestamp}
 */
proto.TimestampClause.prototype.getTimestamp = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, common_pb.Timestamp, 3));
};


/**
 * @param {?proto.Timestamp|undefined} value
 * @return {!proto.TimestampClause} returns this
*/
proto.TimestampClause.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TimestampClause} returns this
 */
proto.TimestampClause.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TimestampClause.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Timestamp endTimestamp = 4;
 * @return {?proto.Timestamp}
 */
proto.TimestampClause.prototype.getEndtimestamp = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, common_pb.Timestamp, 4));
};


/**
 * @param {?proto.Timestamp|undefined} value
 * @return {!proto.TimestampClause} returns this
*/
proto.TimestampClause.prototype.setEndtimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.TimestampClause} returns this
 */
proto.TimestampClause.prototype.clearEndtimestamp = function() {
  return this.setEndtimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.TimestampClause.prototype.hasEndtimestamp = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Snapshot.repeatedFields_ = [3,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Snapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.Snapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Snapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Snapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, 0),
    snapshottimestamp: (f = msg.getSnapshottimestamp()) && common_pb.Timestamp.toObject(includeInstance, f),
    pvsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    first: (f = msg.getFirst()) && common_pb.Timestamp.toObject(includeInstance, f),
    last: (f = msg.getLast()) && common_pb.Timestamp.toObject(includeInstance, f),
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    common_pb.Attribute.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Snapshot}
 */
proto.Snapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Snapshot;
  return proto.Snapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Snapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Snapshot}
 */
proto.Snapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setId(value);
      break;
    case 2:
      var value = new common_pb.Timestamp;
      reader.readMessage(value,common_pb.Timestamp.deserializeBinaryFromReader);
      msg.setSnapshottimestamp(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addPvs(value);
      break;
    case 4:
      var value = new common_pb.Timestamp;
      reader.readMessage(value,common_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFirst(value);
      break;
    case 5:
      var value = new common_pb.Timestamp;
      reader.readMessage(value,common_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLast(value);
      break;
    case 6:
      var value = new common_pb.Attribute;
      reader.readMessage(value,common_pb.Attribute.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Snapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Snapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Snapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Snapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSnapshottimestamp();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getPvsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getFirst();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLast();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      common_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      common_pb.Attribute.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 id = 1;
 * @return {number}
 */
proto.Snapshot.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Snapshot} returns this
 */
proto.Snapshot.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Timestamp snapshotTimestamp = 2;
 * @return {?proto.Timestamp}
 */
proto.Snapshot.prototype.getSnapshottimestamp = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, common_pb.Timestamp, 2));
};


/**
 * @param {?proto.Timestamp|undefined} value
 * @return {!proto.Snapshot} returns this
*/
proto.Snapshot.prototype.setSnapshottimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Snapshot} returns this
 */
proto.Snapshot.prototype.clearSnapshottimestamp = function() {
  return this.setSnapshottimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Snapshot.prototype.hasSnapshottimestamp = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated string pvs = 3;
 * @return {!Array<string>}
 */
proto.Snapshot.prototype.getPvsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Snapshot} returns this
 */
proto.Snapshot.prototype.setPvsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Snapshot} returns this
 */
proto.Snapshot.prototype.addPvs = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Snapshot} returns this
 */
proto.Snapshot.prototype.clearPvsList = function() {
  return this.setPvsList([]);
};


/**
 * optional Timestamp first = 4;
 * @return {?proto.Timestamp}
 */
proto.Snapshot.prototype.getFirst = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, common_pb.Timestamp, 4));
};


/**
 * @param {?proto.Timestamp|undefined} value
 * @return {!proto.Snapshot} returns this
*/
proto.Snapshot.prototype.setFirst = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Snapshot} returns this
 */
proto.Snapshot.prototype.clearFirst = function() {
  return this.setFirst(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Snapshot.prototype.hasFirst = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Timestamp last = 5;
 * @return {?proto.Timestamp}
 */
proto.Snapshot.prototype.getLast = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, common_pb.Timestamp, 5));
};


/**
 * @param {?proto.Timestamp|undefined} value
 * @return {!proto.Snapshot} returns this
*/
proto.Snapshot.prototype.setLast = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Snapshot} returns this
 */
proto.Snapshot.prototype.clearLast = function() {
  return this.setLast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Snapshot.prototype.hasLast = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated Attribute attributes = 6;
 * @return {!Array<!proto.Attribute>}
 */
proto.Snapshot.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.Attribute>} */ (
    jspb.Message.getRepeatedWrapperField(this, common_pb.Attribute, 6));
};


/**
 * @param {!Array<!proto.Attribute>} value
 * @return {!proto.Snapshot} returns this
*/
proto.Snapshot.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Attribute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Attribute}
 */
proto.Snapshot.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Attribute, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Snapshot} returns this
 */
proto.Snapshot.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PVResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PVResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.PVResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PVResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PVResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pvsList: jspb.Message.toObjectList(msg.getPvsList(),
    proto.PV.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PVResponse}
 */
proto.PVResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PVResponse;
  return proto.PVResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PVResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PVResponse}
 */
proto.PVResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PV;
      reader.readMessage(value,proto.PV.deserializeBinaryFromReader);
      msg.addPvs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PVResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PVResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PVResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PVResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPvsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.PV.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PV pvs = 1;
 * @return {!Array<!proto.PV>}
 */
proto.PVResponse.prototype.getPvsList = function() {
  return /** @type{!Array<!proto.PV>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PV, 1));
};


/**
 * @param {!Array<!proto.PV>} value
 * @return {!proto.PVResponse} returns this
*/
proto.PVResponse.prototype.setPvsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.PV=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PV}
 */
proto.PVResponse.prototype.addPvs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.PV, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PVResponse} returns this
 */
proto.PVResponse.prototype.clearPvsList = function() {
  return this.setPvsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.PV.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PV.prototype.toObject = function(opt_includeInstance) {
  return proto.PV.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PV} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PV.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.PVField.toObject, includeInstance),
    first: (f = msg.getFirst()) && common_pb.Timestamp.toObject(includeInstance, f),
    last: (f = msg.getLast()) && common_pb.Timestamp.toObject(includeInstance, f),
    providerid: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PV}
 */
proto.PV.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PV;
  return proto.PV.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PV} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PV}
 */
proto.PV.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.PVField;
      reader.readMessage(value,proto.PVField.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    case 3:
      var value = new common_pb.Timestamp;
      reader.readMessage(value,common_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFirst(value);
      break;
    case 4:
      var value = new common_pb.Timestamp;
      reader.readMessage(value,common_pb.Timestamp.deserializeBinaryFromReader);
      msg.setLast(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProviderid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PV.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PV.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PV} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PV.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.PVField.serializeBinaryToWriter
    );
  }
  f = message.getFirst();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      common_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getLast();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getProviderid();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.PV.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PV} returns this
 */
proto.PV.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated PVField fields = 2;
 * @return {!Array<!proto.PVField>}
 */
proto.PV.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.PVField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.PVField, 2));
};


/**
 * @param {!Array<!proto.PVField>} value
 * @return {!proto.PV} returns this
*/
proto.PV.prototype.setFieldsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.PVField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.PVField}
 */
proto.PV.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.PVField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.PV} returns this
 */
proto.PV.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


/**
 * optional Timestamp first = 3;
 * @return {?proto.Timestamp}
 */
proto.PV.prototype.getFirst = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, common_pb.Timestamp, 3));
};


/**
 * @param {?proto.Timestamp|undefined} value
 * @return {!proto.PV} returns this
*/
proto.PV.prototype.setFirst = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PV} returns this
 */
proto.PV.prototype.clearFirst = function() {
  return this.setFirst(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PV.prototype.hasFirst = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Timestamp last = 4;
 * @return {?proto.Timestamp}
 */
proto.PV.prototype.getLast = function() {
  return /** @type{?proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, common_pb.Timestamp, 4));
};


/**
 * @param {?proto.Timestamp|undefined} value
 * @return {!proto.PV} returns this
*/
proto.PV.prototype.setLast = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.PV} returns this
 */
proto.PV.prototype.clearLast = function() {
  return this.setLast(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PV.prototype.hasLast = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 providerID = 5;
 * @return {number}
 */
proto.PV.prototype.getProviderid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.PV} returns this
 */
proto.PV.prototype.setProviderid = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PVField.prototype.toObject = function(opt_includeInstance) {
  return proto.PVField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PVField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PVField.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PVField}
 */
proto.PVField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PVField;
  return proto.PVField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PVField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PVField}
 */
proto.PVField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.PVType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PVField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PVField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PVField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PVField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.PVField.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PVField} returns this
 */
proto.PVField.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PVType type = 2;
 * @return {!proto.PVType}
 */
proto.PVField.prototype.getType = function() {
  return /** @type {!proto.PVType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.PVType} value
 * @return {!proto.PVField} returns this
 */
proto.PVField.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.AnnotationsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AnnotationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.AnnotationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AnnotationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnnotationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    annotationsList: jspb.Message.toObjectList(msg.getAnnotationsList(),
    proto.Annotation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AnnotationsResponse}
 */
proto.AnnotationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AnnotationsResponse;
  return proto.AnnotationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AnnotationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AnnotationsResponse}
 */
proto.AnnotationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Annotation;
      reader.readMessage(value,proto.Annotation.deserializeBinaryFromReader);
      msg.addAnnotations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AnnotationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AnnotationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AnnotationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AnnotationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnnotationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Annotation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Annotation annotations = 1;
 * @return {!Array<!proto.Annotation>}
 */
proto.AnnotationsResponse.prototype.getAnnotationsList = function() {
  return /** @type{!Array<!proto.Annotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Annotation, 1));
};


/**
 * @param {!Array<!proto.Annotation>} value
 * @return {!proto.AnnotationsResponse} returns this
*/
proto.AnnotationsResponse.prototype.setAnnotationsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Annotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Annotation}
 */
proto.AnnotationsResponse.prototype.addAnnotations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Annotation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.AnnotationsResponse} returns this
 */
proto.AnnotationsResponse.prototype.clearAnnotationsList = function() {
  return this.setAnnotationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Annotation.prototype.toObject = function(opt_includeInstance) {
  return proto.Annotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Annotation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Annotation.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Annotation}
 */
proto.Annotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Annotation;
  return proto.Annotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Annotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Annotation}
 */
proto.Annotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Annotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Annotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Annotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Annotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.Annotation.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Annotation} returns this
 */
proto.Annotation.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.Annotation.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Annotation} returns this
 */
proto.Annotation.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.PVType = {
  FLOAT: 0,
  STRING: 1,
  INTEGER: 2,
  BOOLEAN: 3,
  STRUCTURE: 4,
  IMAGE: 5,
  ARRAY: 6,
  BYTE_ARRAY: 7
};

/**
 * @enum {number}
 */
proto.SnapshotTimestampClausePredicate = {
  BEFORE: 0,
  BETWEEN: 1,
  AFTER: 2
};

/**
 * @enum {number}
 */
proto.SnapshotTimestampClauseSelector = {
  SNAPSHOT_TIMESTAMP: 0,
  FIRST_TIMESTAMP: 1,
  LAST_TIMESTAMP: 2
};

goog.object.extend(exports, proto);
